/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface DAOInterface extends utils.Interface {
  functions: {
    "createVoting(string,address,bytes)": FunctionFragment;
    "delegateVotesTo(address)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "ercContract()": FunctionFragment;
    "finishVoting(uint256)": FunctionFragment;
    "getAddressVote(uint256,address)": FunctionFragment;
    "getVotingDetail(uint256)": FunctionFragment;
    "minimumQuorumPercentage()": FunctionFragment;
    "vote(uint256,uint8)": FunctionFragment;
    "voteFor(uint256,address,uint8)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createVoting",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateVotesTo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ercContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finishVoting",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressVote",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingDetail",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumQuorumPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voteFor",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "createVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateVotesTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ercContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finishVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddressVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingDetail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumQuorumPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voteFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Vote(uint256,address,uint8,uint256)": EventFragment;
    "VotingCreated(uint256,string)": EventFragment;
    "VotingFinished(uint256,uint256,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Vote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VotingCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VotingFinished"): EventFragment;
}

export type VoteEvent = TypedEvent<
  [BigNumber, string, number, BigNumber],
  { _votingId: BigNumber; voter: string; option: number; voteAmount: BigNumber }
>;

export type VoteEventFilter = TypedEventFilter<VoteEvent>;

export type VotingCreatedEvent = TypedEvent<
  [BigNumber, string],
  { _votingId: BigNumber; description: string }
>;

export type VotingCreatedEventFilter = TypedEventFilter<VotingCreatedEvent>;

export type VotingFinishedEvent = TypedEvent<
  [BigNumber, BigNumber, number],
  { _votingId: BigNumber; totalVoted: BigNumber; result: number }
>;

export type VotingFinishedEventFilter = TypedEventFilter<VotingFinishedEvent>;

export interface DAO extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DAOInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createVoting(
      description: string,
      recipient: string,
      callData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegateVotesTo(
      delegateAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ercContract(overrides?: CallOverrides): Promise<[string]>;

    finishVoting(
      votingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAddressVote(
      votingId: BigNumberish,
      voterAddress: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getVotingDetail(
      votingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        string,
        string
      ] & {
        description: string;
        createdAt: BigNumber;
        duration: BigNumber;
        totalSupplyAtCreation: BigNumber;
        totalFor: BigNumber;
        totalAgainst: BigNumber;
        result: number;
        recipient: string;
        callData: string;
      }
    >;

    minimumQuorumPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    vote(
      votingId: BigNumberish,
      option: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voteFor(
      votingId: BigNumberish,
      votingAddress: string,
      option: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createVoting(
    description: string,
    recipient: string,
    callData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegateVotesTo(
    delegateAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ercContract(overrides?: CallOverrides): Promise<string>;

  finishVoting(
    votingId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAddressVote(
    votingId: BigNumberish,
    voterAddress: string,
    overrides?: CallOverrides
  ): Promise<number>;

  getVotingDetail(
    votingId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      string,
      string
    ] & {
      description: string;
      createdAt: BigNumber;
      duration: BigNumber;
      totalSupplyAtCreation: BigNumber;
      totalFor: BigNumber;
      totalAgainst: BigNumber;
      result: number;
      recipient: string;
      callData: string;
    }
  >;

  minimumQuorumPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  vote(
    votingId: BigNumberish,
    option: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voteFor(
    votingId: BigNumberish,
    votingAddress: string,
    option: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createVoting(
      description: string,
      recipient: string,
      callData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    delegateVotesTo(
      delegateAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    ercContract(overrides?: CallOverrides): Promise<string>;

    finishVoting(
      votingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAddressVote(
      votingId: BigNumberish,
      voterAddress: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getVotingDetail(
      votingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        string,
        string
      ] & {
        description: string;
        createdAt: BigNumber;
        duration: BigNumber;
        totalSupplyAtCreation: BigNumber;
        totalFor: BigNumber;
        totalAgainst: BigNumber;
        result: number;
        recipient: string;
        callData: string;
      }
    >;

    minimumQuorumPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      votingId: BigNumberish,
      option: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    voteFor(
      votingId: BigNumberish,
      votingAddress: string,
      option: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Vote(uint256,address,uint8,uint256)"(
      _votingId?: BigNumberish | null,
      voter?: null,
      option?: null,
      voteAmount?: null
    ): VoteEventFilter;
    Vote(
      _votingId?: BigNumberish | null,
      voter?: null,
      option?: null,
      voteAmount?: null
    ): VoteEventFilter;

    "VotingCreated(uint256,string)"(
      _votingId?: BigNumberish | null,
      description?: null
    ): VotingCreatedEventFilter;
    VotingCreated(
      _votingId?: BigNumberish | null,
      description?: null
    ): VotingCreatedEventFilter;

    "VotingFinished(uint256,uint256,uint8)"(
      _votingId?: BigNumberish | null,
      totalVoted?: null,
      result?: null
    ): VotingFinishedEventFilter;
    VotingFinished(
      _votingId?: BigNumberish | null,
      totalVoted?: null,
      result?: null
    ): VotingFinishedEventFilter;
  };

  estimateGas: {
    createVoting(
      description: string,
      recipient: string,
      callData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegateVotesTo(
      delegateAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ercContract(overrides?: CallOverrides): Promise<BigNumber>;

    finishVoting(
      votingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAddressVote(
      votingId: BigNumberish,
      voterAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotingDetail(
      votingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumQuorumPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      votingId: BigNumberish,
      option: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voteFor(
      votingId: BigNumberish,
      votingAddress: string,
      option: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createVoting(
      description: string,
      recipient: string,
      callData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegateVotesTo(
      delegateAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ercContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finishVoting(
      votingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAddressVote(
      votingId: BigNumberish,
      voterAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotingDetail(
      votingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumQuorumPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vote(
      votingId: BigNumberish,
      option: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voteFor(
      votingId: BigNumberish,
      votingAddress: string,
      option: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
